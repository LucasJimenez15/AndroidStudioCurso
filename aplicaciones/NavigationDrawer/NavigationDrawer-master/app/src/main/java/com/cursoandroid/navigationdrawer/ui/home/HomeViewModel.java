// Paquete que indica la ubicaci√≥n del archivo dentro del proyecto.
package com.cursoandroid.navigationdrawer.ui.home;

// Importa LiveData, que permite observar datos y reaccionar autom√°ticamente cuando cambian.
import androidx.lifecycle.LiveData;

// MutableLiveData es una versi√≥n modificable de LiveData.
import androidx.lifecycle.MutableLiveData;

// ViewModel forma parte de la arquitectura de Android Jetpack.
// Su objetivo es almacenar y gestionar datos para la interfaz de usuario (UI) de manera segura y eficiente.
import androidx.lifecycle.ViewModel;

// Esta clase es el ViewModel del fragmento Home.
// El ViewModel mantiene los datos visibles de forma segura aunque se roten la pantalla o se cierre temporalmente la app.
public class HomeViewModel extends ViewModel {

    // Variable privada que contiene el texto observado desde la UI.
    // MutableLiveData significa que su valor puede cambiar internamente en esta clase.
    private MutableLiveData<String> mText;

    // Constructor del ViewModel
    public HomeViewModel() {
        // Se instancia el MutableLiveData.
        mText = new MutableLiveData<>();

        // Se establece un valor inicial al texto.
        // Este texto ser√° el que se muestre en el TextView del fragmento cuando se abra.
        mText.setValue("This is home fragment");

        // üü¢ ¬øPor qu√© usar ViewModel + LiveData?
        // Anteriormente, los datos se almacenaban directamente en la Activity o el Fragment,
        // pero al rotar la pantalla o si el sistema destru√≠a la UI, esos datos se perd√≠an.
        // ViewModel conserva los datos mientras la UI est√© viva, y LiveData notifica autom√°ticamente
        // a la interfaz si los datos cambian. As√≠, se separa la l√≥gica de negocio de la vista.
    }

    // Este m√©todo permite que otras clases (como el fragmento) puedan observar el valor del texto.
    // Se devuelve LiveData, no MutableLiveData, para que desde afuera solo puedan observarlo, pero no modificarlo.
    public LiveData<String> getText() {
        return mText;
    }
}


/*üìå RESUMEN ACLARATORIO
üß† ¬øQu√© se hac√≠a antes de ViewModel y LiveData?
Antes, se usaban variables directamente dentro de la Activity o Fragment. Esto tra√≠a muchos problemas:
Al rotar la pantalla, la actividad se destru√≠a y se creaba de nuevo, perdiendo toda la informaci√≥n.
Hab√≠a que usar m√©todos como onSaveInstanceState() para guardar y recuperar manualmente los datos, lo cual era muy tedioso.
No hab√≠a una forma simple de reactivar la UI autom√°ticamente cuando los datos cambiaban.

‚úÖ ¬øQu√© soluciona la arquitectura actual?
ViewModel mantiene los datos aunque la pantalla rote o el sistema destruya temporalmente la UI.
LiveData permite que los fragmentos o actividades escuchen los datos, y la interfaz se actualiza autom√°ticamente si cambian, sin tener que escribir mucho c√≥digo adicional.
Se mejora la separaci√≥n de responsabilidades: la UI se encarga solo de mostrar, y el ViewModel de manejar los datos.*/