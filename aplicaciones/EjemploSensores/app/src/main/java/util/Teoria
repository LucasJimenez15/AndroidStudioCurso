
---------------------------------------------------------------------------------------------------------
✅✅ Que hace este codigo???

Un acelerómetro en un celular es un sensor que detecta y mide los movimientos o aceleraciones del dispositivo en los tres ejes del espacio: X (horizontal), Y (vertical) y Z (profundidad). Es decir, puede saber si el teléfono se mueve, se agita, se inclina o cambia de orientación.

🧠 ¿Qué mide exactamente? El acelerómetro mide la aceleración en metros por segundo al cuadrado (m/s²) que sufre el dispositivo en cada eje.
Eso incluye: Movimientos físicos (como sacudir o inclinar el teléfono). La fuerza de la gravedad, que siempre afecta al eje Z.

📱 ¿Para qué sirve en un celular? El acelerómetro tiene muchos usos en el mundo real:

Uso	Explicación
🔄 Rotación automática de pantalla	Detecta si estás usando el teléfono en modo vertical u horizontal.
🎮 Juegos	Detecta inclinaciones para controlar personajes o vehículos.
💤 Detección de inactividad	Por ejemplo, para apagar la pantalla si no se mueve.
🚶‍♂️ Contador de pasos	Combinado con otros sensores, ayuda a detectar movimientos del cuerpo.
🛑 Detección de caídas	En apps de salud o seguridad.
📷 Estabilización de imagen	Ayuda a mejorar la estabilidad de la cámara en movimiento.

🧭 ¿Cómo funciona internamente? Un acelerómetro suele estar hecho con componentes microelectromecánicos (MEMS). Dentro del sensor, hay pequeñas estructuras que se mueven cuando el teléfono se acelera, y esos movimientos se traducen en valores eléctricos que el sistema interpreta como aceleración en X, Y o Z.

📊 Ejemplo de ejes:
Imaginá tu celular acostado sobre la mesa:

Eje X: izquierda ↔ derecha
Eje Y: arriba ↔ abajo (si está en vertical)
Eje Z: adentro ↔ afuera (perpendicular a la pantalla)

Cuando levantás o inclinás el teléfono, esos valores cambian.

🔍 ¿Y cómo lo usamos en programación Android?
Android ofrece una API para trabajar con sensores como el acelerómetro mediante SensorManager y SensorEventListener. Así puedes leer en tiempo real los valores de los tres ejes y reaccionar a movimientos.

----------------------------------------------------------------------------------------------------------------
La diferencia entre ActionBarActivity y AppCompatActivity tiene que ver con la evolución de las bibliotecas de soporte en Android y el manejo moderno de interfaces compatibles con versiones antiguas.

🔹 ActionBarActivity (OBSOLETO)
Clase antigua que formaba parte de la antigua biblioteca android.support.v7.app.

Permitía usar la ActionBar (barra superior de navegación) en versiones antiguas de Android (como Android 2.1 - 4.0), cuando aún no venía integrada de forma nativa. Fue útil en su momento para ofrecer una experiencia visual moderna en dispositivos viejos.

🟠 Obsoleto desde: Support Library 22.1 (2015)
🛑 Ya no debe usarse. Si la usás hoy, el IDE marcará advertencias o errores.

----------------------------------------------------------------------------------------------------------------

🔹 AppCompatActivity (ACTUAL): Clase más moderna y recomendada, que reemplazó a ActionBarActivity. Forma parte de la biblioteca androidx.appcompat.app.AppCompatActivity.

Proporciona: Compatibilidad con temas modernos (como Material Design). Soporte para ActionBar / Toolbar personalizable. Integración con componentes modernos como ViewModel, LiveData, Navigation, etc. Retrocompatibilidad con versiones antiguas de Android (API 14+).

✅ Es la base para casi todas las actividades modernas en apps Android que usan Kotlin o Java.

📌 ¿Cuál deberías usar hoy?
👉 Siempre AppCompatActivity.
Es estable, moderna, y es parte del ecosistema AndroidX, que reemplazó todas las viejas support.*.
