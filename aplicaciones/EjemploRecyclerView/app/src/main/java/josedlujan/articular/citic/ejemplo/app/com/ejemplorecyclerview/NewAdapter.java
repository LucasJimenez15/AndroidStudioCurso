// Este paquete indica en qu√© ubicaci√≥n se encuentra la clase dentro del proyecto.
package josedlujan.articular.citic.ejemplo.app.com.ejemplorecyclerview;

// Importaciones necesarias para trabajar con RecyclerView.
// `RecyclerView` es un componente moderno que reemplaza al antiguo `ListView` porque
// permite una gesti√≥n mucho m√°s eficiente y flexible de listas o grillas de datos.
import androidx.recyclerview.widget.RecyclerView;
import android.view.View;
import android.view.ViewGroup;

/**
 * Esta clase define un adaptador personalizado llamado NewAdapter para un RecyclerView.
 * Un adaptador es el "puente" entre los datos y las vistas que se muestran en pantalla.
 * En este caso, hereda de RecyclerView.Adapter y utiliza una clase interna ViewHolder.
 *
 * IMPORTANTE: Esta clase a√∫n est√° incompleta y solo es una plantilla b√°sica (esqueleto).
 */
public class NewAdapter extends RecyclerView.Adapter<NewAdapter.ViewHolder> {

    /**
     * M√©todo que se encarga de crear una nueva vista (ViewHolder) para un √≠tem de la lista.
     * Es como "inflar" el dise√±o XML que representa un solo elemento.
     * Este m√©todo se llama solo cuando se necesita una nueva vista (no reciclada).
     * ANTES: en ListView, se usaba `getView()`, pero no era tan eficiente ni modular como esto.*/
    @Override
    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        // Aqu√≠ deber√≠a inflarse el layout XML de un √≠tem y crear el ViewHolder.
        // Por ahora retorna null porque no se ha implementado a√∫n.
        return null;
    }

    /**
     * Este m√©todo une (bind) los datos con la vista del ViewHolder.
     * Es decir, aqu√≠ se toman los datos de la posici√≥n actual y se muestran en los componentes visuales (TextViews, ImageViews, etc).
     *
     * Este m√©todo se llama cada vez que una vista se va a mostrar en pantalla.
     *
     * ANTES: en ListView, este proceso estaba todo mezclado en `getView()` y se deb√≠a hacer el reciclado manual.
     * En RecyclerView es mucho m√°s ordenado y eficiente.
     */
    @Override
    public void onBindViewHolder(ViewHolder holder, int position) {
        // Aqu√≠ se deber√≠an cargar los datos en los elementos del ViewHolder.
        // A√∫n no est√° implementado.
    }

    /**
     * Este m√©todo devuelve la cantidad total de elementos que hay en la lista.
     *
     * Esto es necesario para que el RecyclerView sepa cu√°ntas veces debe llamar a onCreateViewHolder y onBindViewHolder.
     */
    @Override
    public int getItemCount() {
        // Por ahora devuelve 0 porque no hay datos definidos a√∫n.
        return 0;
    }

    /**
     * Esta clase interna representa el ViewHolder.
     * Un ViewHolder es un objeto que "guarda" las vistas de un √≠tem (por ejemplo, un TextView, ImageView, etc.)
     * para que no sea necesario buscarlas cada vez que se recicla una vista, lo cual mejora much√≠simo el rendimiento.
     *
     * ANTES: en ListView no exist√≠a esta clase de forma tan clara, y era com√∫n ver problemas de rendimiento
     * por usar `findViewById()` en cada fila repetidamente.
     */
    public class ViewHolder extends RecyclerView.ViewHolder {

        /**
         * Constructor del ViewHolder.
         * Recibe una vista (el layout inflado del √≠tem) y se encarga de enlazar sus componentes visuales.
         */
        public ViewHolder(View itemView) {
            super(itemView);
            // Aqu√≠ es donde normalmente se hace:
            // miTextView = itemView.findViewById(R.id.mi_textview);
            // Pero a√∫n no se ha hecho porque es un esqueleto.
        }
    }
}

/*üß† Explicaci√≥n adicional:
Parte	Explicaci√≥n
onCreateViewHolder()	Se llama cuando se necesita crear una nueva vista. Aqu√≠ se infla el layout del √≠tem.
onBindViewHolder()	Se llama para mostrar los datos en la vista. Se enlazan los datos con la vista reciclada.
getItemCount()	Informa al RecyclerView cu√°ntos elementos hay. Si devuelve 0, no se muestra nada.
ViewHolder	Clase que guarda las vistas internas de cada √≠tem. Mejora el rendimiento al evitar llamadas innecesarias a findViewById().*/
