package datos.preferencias.plataforma.cursos.escuela.it.ejemplopreferenciasdatos;

import android.content.Context;
import android.content.SharedPreferences;
import android.os.Bundle;
import androidx.appcompat.app.AppCompatActivity;
import josedlujan.compras.de.lista.app.com.ejemplocardview.databinding.ActivityMainBinding;

// Esta clase es la actividad principal de la aplicaci칩n,
// donde se muestra y se guarda un texto usando SharedPreferences para que persista entre sesiones.
public class MainActivity extends AppCompatActivity {

    // Variable para manejar el ViewBinding, que es una forma moderna y segura para acceder a las vistas definidas en el XML sin usar findViewById. Antes, usar findViewById era necesario, pero era m치s propenso a errores (como referencias nulas) y m치s repetitivo.
    private ActivityMainBinding binding;

    // Variable para almacenar la referencia a SharedPreferences, que es el mecanismo simple de Android para guardar datos peque침os (clave-valor). Se usa para guardar configuraciones o informaci칩n que debe persistir entre sesiones.
    private SharedPreferences preferences;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // Inicializamos ViewBinding. Esto crea un objeto que enlaza las vistas declaradas en el XML (activity_main.xml) con variables en este c칩digo, evitando la necesidad de usar findViewById. Esto ayuda a prevenir errores, mejora la legibilidad y el mantenimiento.
        binding = ActivityMainBinding.inflate(getLayoutInflater());

        // Establecemos el layout que usar치 la actividad, usando la ra칤z de la jerarqu칤a de vistas creada por ViewBinding.
        setContentView(binding.getRoot());

        // Obtenemos la instancia de SharedPreferences con el nombre "preferencias". El modo Context.MODE_PRIVATE indica que estas preferencias solo pueden ser accedidas por esta aplicaci칩n, y hace que el archivo que guarda esta informacion no pueda ser accedido por otra aplicacion para modificarla (cosa que antes sucedia). Antes, guardar datos se hac칤a con archivos o bases de datos m치s complejas, pero SharedPreferences es sencillo y r치pido para datos peque침os.
        preferences = getSharedPreferences("preferencias", Context.MODE_PRIVATE);

        // Leemos el valor guardado con la clave "pepito" de SharedPreferences. Si no existe ning칰n valor guardado, retorna "valor por defecto". Esto es 칰til para evitar errores si a칰n no se ha guardado nada.
        String valorGuardado = preferences.getString("pepito", "valor por defecto");

        // Mostramos el valor recuperado en el TextView correspondiente. As칤 el usuario puede ver la informaci칩n que fue guardada anteriormente.
        binding.textView.setText(valorGuardado);

        // Configuramos el evento click para el bot칩n usando una expresi칩n lambda. Antes se usaban clases an칩nimas con mucha m치s sintaxis, lo que hac칤a el c칩digo m치s extenso y menos claro.
        /*Un listener (escuchador) en Android es un objeto que "escucha" eventos, como toques en botones, cambios de texto, clics, etc. Cuando ocurre ese evento, el listener ejecuta un bloque de c칩digo (una acci칩n que t칰 defines).
        Por ejemplo, un bot칩n usa un setOnClickListener() para saber qu칠 hacer cuando se lo toca.
        Resumiendo: 游녤 Un listener espera un evento y responde cuando sucede.*/

        binding.boton.setOnClickListener(v -> {
            // Obtenemos el texto ingresado en el EditText y le quitamos espacios al inicio y final con trim() para guardar un dato limpio.
            String dato = binding.editText.getText().toString().trim();

            // Creamos un editor para SharedPreferences que una interfaz como podemos ver para poder modificar los datos. Luego guardamos la cadena 'dato' bajo la clave "pepito". Finalmente, usamos apply() para guardar de forma as칤ncrona. Antes se usaba commit(), que bloqueaba el hilo principal y pod칤a causar problemas de rendimiento o que la interfaz se congelara.
            preferences.edit().putString("pepito", dato).apply();
        });
    }
}

/*Resumen de los puntos importantes en la explicaci칩n:
ViewBinding: Evita el findViewById que era tedioso, propenso a errores y poco legible.
SharedPreferences: M칠todo sencillo para guardar datos peque침os (texto, n칰meros).
apply() vs commit(): apply() guarda en segundo plano sin bloquear la interfaz, mientras que commit() es s칤ncrono y puede causar lentitud.
Lambdas: Reducen mucho la cantidad de c칩digo para eventos como clics, haciendo el c칩digo m치s limpio.*/