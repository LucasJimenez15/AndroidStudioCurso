<?xml version="1.0" encoding="utf-8"?>
<!-- DeclaraciÃ³n estÃ¡ndar del archivo XML para Android. -->

<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    app:layout_behavior="@string/appbar_scrolling_view_behavior"
    tools:showIn="@layout/app_bar_main">

    <!-- ðŸ”· ConstraintLayout es un layout flexible y moderno que permite posicionar elementos
         con base en restricciones (constraints). Reemplaza a LinearLayout, RelativeLayout, etc.
         - Ofrece mejor rendimiento y mayor control visual.
         - Se estÃ¡ usando aquÃ­ como contenedor principal del contenido dinÃ¡mico. -->

    <fragment
        android:id="@+id/nav_host_fragment"
        android:name="androidx.navigation.fragment.NavHostFragment"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:defaultNavHost="true"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:navGraph="@navigation/mobile_navigation" />

    <!-- ðŸ”¹ Este fragmento especial es el "NavHostFragment", y es el nÃºcleo del sistema de navegaciÃ³n moderna.
         Â¿QuÃ© hace?
         - Es un contenedor invisible que se encarga de cargar los Fragments segÃºn la navegaciÃ³n.
         - El atributo app:navGraph indica cuÃ¡l es el archivo de navegaciÃ³n a usar (en este caso mobile_navigation.xml).
         - app:defaultNavHost="true" indica que esta serÃ¡ la "actividad principal" para capturar eventos de navegaciÃ³n
           como el botÃ³n AtrÃ¡s (Back).

         ðŸ§  Antes, los fragmentos se cargaban manualmente con FragmentManager y FragmentTransaction,
             lo que requerÃ­a escribir cÃ³digo complejo y propenso a errores.
             Ahora todo esto se maneja automÃ¡ticamente con Navigation Component. -->

</androidx.constraintlayout.widget.ConstraintLayout>

<!--ðŸ“Œ RESUMEN CLAVE
âœ… Â¿QuÃ© hace este archivo?
Define el espacio visual donde se van a mostrar los fragments (como "Home", "GalerÃ­a", etc.).
Usa el NavHostFragment, que es parte de la arquitectura moderna de navegaciÃ³n.
Se conecta con el archivo mobile_navigation.xml (navGraph), donde estÃ¡n definidos todos los destinos (pantallas) de la app.

ðŸ§  Â¿CÃ³mo se hacÃ­a antes?
HabÃ­a que reemplazar manualmente fragmentos en un FrameLayout usando FragmentTransaction.
El manejo del botÃ³n "AtrÃ¡s", de animaciones y del paso de argumentos era complicado y manual.
HabÃ­a mÃ¡s cÃ³digo repetitivo y mÃ¡s posibilidades de errores.

Con Navigation Component:
Solo se define el NavHostFragment en XML y se crea un grafo de navegaciÃ³n. El sistema se encarga de todo: reemplazos, historial, transiciones, etc.-->